Index: code/gamma_fits/fit_proc.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport pandas as pd\nfrom utils import run_f_test\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nsns.set(style = \"ticks\", context = \"poster\")\n\nstudy = \"nir\"\ngroups = [\"Th17\"]\nactivations = [\"invitro\"]\nmonth = \"jan2021\"\n\nreaddir = \"../../output/gamma_fits/\" + month + \"/\"\n\nfor g in groups:\n    for act in activations:\n        dummy = study + \"_\" + g + \"_\" + act + \".csv\"\n        file_a = readdir + \"fit_expo_\" + dummy\n        file_b = readdir + \"fit_gamma_\" + dummy\n        file_c = readdir + \"ftest_\" + dummy\n\n        df_exp = pd.read_csv(file_a)\n        df_gamma = pd.read_csv(file_b)\n        df_fit = pd.read_csv(file_c)\n\n\n\ndf = pd.concat([df_exp, df_gamma])\n\n# look at residual squares distribution\ng = sns.displot(data = df, x = \"rss\", hue = \"model\")\ng.set(xlim = (0,1.5))\nplt.show()\n\ndef filter_error(df):\n    thres_beta = df.beta_err.quantile(0.9)\n    thres_rss = df.rss.quantile(0.9)\n\n    df = df.loc[(df.rss < thres_rss) & (df.beta_err < thres_beta)]\n    if not np.isnan(df.alpha_err).any():\n        thres_alpha = df.alpha_err.quantile(0.9)\n        df = df.loc[df.alpha_err < thres_alpha]\n\n    return df\n\n# plot error distributions after filtering\ndf_exp_f = filter_error(df_exp)\ndf_gamma_f = filter_error(df_gamma)\n\ndf_filt = pd.concat([df_exp_f, df_gamma_f])\ng = sns.displot(data = df_filt, x = \"beta_err\", hue = \"model\")\ng.set(xlim = (0,0.1))\nplt.show()\n\ndf_filt = pd.concat([df_exp_f, df_gamma_f])\ng = sns.displot(data = df_filt, x = \"alpha_err\", hue = \"model\")\nplt.show()\n\n# get genes that have good fit parameters for gamma or exponential fit\ngenes_good_fit = df_filt.gene.drop_duplicates()\n\ndf_fit_good = df_fit[df_fit.gene.isin(genes_good_fit)]\n\nn_delay_genes = np.sum(df_fit_good[\"f-test\"].values == \"sig\")\nn_good_genes = len(df_fit_good.index)\nn_kinetic = len(df_exp.index)\nn_no_delay = n_good_genes - n_delay_genes\n\n# make barplot\nydata = [n_kinetic, n_good_genes, n_no_delay, n_delay_genes]\nx = np.arange(1, (len(ydata)+1))\nfig, ax = plt.subplots()\nax.bar(x, ydata, color = \"grey\")\nax.set_ylabel(\"n genes\")\nplt.xticks(x, ('', '', '', ''))\nplt.show()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code/gamma_fits/fit_proc.py	(revision 1eb14882d787358503bdfe4db8ca2b2184fe9d76)
+++ code/gamma_fits/fit_proc.py	(date 1611669342422)
@@ -6,72 +6,59 @@
 import numpy as np
 sns.set(style = "ticks", context = "poster")
 
-study = "nir"
-groups = ["Th17"]
+def filter_error(df):
+    thres_beta = df.beta_err.quantile(0.9)
+    thres_rss = df.rss.quantile(0.9)
+
+    df = df.loc[(df.rss < thres_rss) & (df.beta_err < thres_beta)]
+    if not np.isnan(df.alpha_err).any():
+        thres_alpha = df.alpha_err.quantile(0.9)
+        df = df.loc[df.alpha_err < thres_alpha]
+
+    return df
+
+
+study = "peine"
+groups = ["Th0"]
 activations = ["invitro"]
 month = "jan2021"
 
 readdir = "../../output/gamma_fits/" + month + "/"
 
-for g in groups:
+for gr in groups:
     for act in activations:
-        dummy = study + "_" + g + "_" + act + ".csv"
+        dummy = study + "_" + gr + "_" + act + ".csv"
         file_a = readdir + "fit_expo_" + dummy
         file_b = readdir + "fit_gamma_" + dummy
         file_c = readdir + "ftest_" + dummy
 
+        # load data
         df_exp = pd.read_csv(file_a)
         df_gamma = pd.read_csv(file_b)
         df_fit = pd.read_csv(file_c)
-
-
-
-df = pd.concat([df_exp, df_gamma])
+        df = pd.concat([df_exp, df_gamma])
 
-# look at residual squares distribution
-g = sns.displot(data = df, x = "rss", hue = "model")
-g.set(xlim = (0,1.5))
-plt.show()
-
-def filter_error(df):
-    thres_beta = df.beta_err.quantile(0.9)
-    thres_rss = df.rss.quantile(0.9)
-
-    df = df.loc[(df.rss < thres_rss) & (df.beta_err < thres_beta)]
-    if not np.isnan(df.alpha_err).any():
-        thres_alpha = df.alpha_err.quantile(0.9)
-        df = df.loc[df.alpha_err < thres_alpha]
-
-    return df
+        df = df.dropna()
+        # # look at residual squares distribution
 
-# plot error distributions after filtering
-df_exp_f = filter_error(df_exp)
-df_gamma_f = filter_error(df_gamma)
+        # plot error distributions after filtering
+        df_exp_f = filter_error(df_exp)
+        df_gamma_f = filter_error(df_gamma)
 
-df_filt = pd.concat([df_exp_f, df_gamma_f])
-g = sns.displot(data = df_filt, x = "beta_err", hue = "model")
-g.set(xlim = (0,0.1))
-plt.show()
+        df_filt = pd.concat([df_exp_f, df_gamma_f])
+        #g = sns.displot(data = df_filt, x = "rss", hue = "model")
+        #plt.show()
 
-df_filt = pd.concat([df_exp_f, df_gamma_f])
-g = sns.displot(data = df_filt, x = "alpha_err", hue = "model")
-plt.show()
+        #g = sns.displot(data = df_filt, x = "beta_err", hue = "model")
+        #plt.show()
+
+        #g = sns.displot(data = df_filt, x = "alpha_err", hue = "model")
+        #plt.show()
 
-# get genes that have good fit parameters for gamma or exponential fit
-genes_good_fit = df_filt.gene.drop_duplicates()
+        # get genes that have good fit parameters for gamma or exponential fit
+        genes_good_fit = df_filt.gene.drop_duplicates()
 
-df_fit_good = df_fit[df_fit.gene.isin(genes_good_fit)]
+        df_fit_good = df_fit[df_fit.gene.isin(genes_good_fit)]
+        df_fit_good.to_csv(readdir + "fit_summary_" + dummy)
 
-n_delay_genes = np.sum(df_fit_good["f-test"].values == "sig")
-n_good_genes = len(df_fit_good.index)
-n_kinetic = len(df_exp.index)
-n_no_delay = n_good_genes - n_delay_genes
 
-# make barplot
-ydata = [n_kinetic, n_good_genes, n_no_delay, n_delay_genes]
-x = np.arange(1, (len(ydata)+1))
-fig, ax = plt.subplots()
-ax.bar(x, ydata, color = "grey")
-ax.set_ylabel("n genes")
-plt.xticks(x, ('', '', '', ''))
-plt.show()
\ No newline at end of file
Index: code/gamma_fits/kinetics_gamma_fit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Nov  9 13:24:52 2020\n\n@author: burt\nfit gamma dist for output generated from R should work on all kinetic data together\n\"\"\"\n\nimport pandas as pd\nfrom utils import run_f_test\n\nstudy = \"powrie\"\ngroups = [\"innate\"]\nactivations = [\"colitis\"]\nmonth = \"jan2021\"\n\nreaddir = \"../../data/data_rtm/\"\nsavedir = \"../../output/gamma_fits/\" + month + \"/\"\n\nfor g in groups:\n    for act in activations:\n\n        file = readdir+study + \"_rtm_\" + g + \"_\" + act + \".csv\"\n        df = pd.read_csv(file)\n\n        # if rna seq data, kick out nans generated through rlog trafo\n        if study == \"proserpio\":\n            genes_na = df.gene[df.SD.isna()]\n            df = df[~df.gene.isin(genes_na)]\n        # kick out NAs, at least in properio there are some nas for some reason\n        # I need to double check this\n\n        a,b,c = run_f_test(df)\n\n        dummy = study + \"_\" + g + \"_\" + act + \".csv\"\n        file_a = savedir + \"fit_expo_\" + dummy\n        file_b = savedir + \"fit_gamma_\" + dummy\n        file_c = savedir + \"ftest_\" + dummy\n\n        a.to_csv(file_a)\n        b.to_csv(file_b)\n        c.to_csv(file_c)\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code/gamma_fits/kinetics_gamma_fit.py	(revision 1eb14882d787358503bdfe4db8ca2b2184fe9d76)
+++ code/gamma_fits/kinetics_gamma_fit.py	(date 1611669320714)
@@ -28,9 +28,9 @@
         if study == "proserpio":
             genes_na = df.gene[df.SD.isna()]
             df = df[~df.gene.isin(genes_na)]
+
         # kick out NAs, at least in properio there are some nas for some reason
         # I need to double check this
-
         a,b,c = run_f_test(df)
 
         dummy = study + "_" + g + "_" + act + ".csv"
Index: code/gamma_fits/fit_summary.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code/gamma_fits/fit_summary.py	(date 1611672242611)
+++ code/gamma_fits/fit_summary.py	(date 1611672242611)
@@ -0,0 +1,49 @@
+
+import numpy as np
+import pandas as pd
+import seaborn as sns
+import os
+import glob
+import pandas as pd
+import matplotlib.pyplot as plt
+
+sns.set(style = "ticks", context = "poster")
+
+month = "jan2021"
+readdir = "../../output/gamma_fits/" + month + "/"
+
+filenames = os.listdir(readdir)
+pattern = "fit_summary"
+filenames = [f for f in filenames if pattern in f]
+filepaths = [readdir + f for f in filenames]
+
+fits = []
+for f,n in zip(filepaths,filenames):
+    fit = pd.read_csv(f)
+    fit["study"] = n[12:-4]
+    fits.append(fit)
+
+df_fits = pd.concat(fits)
+
+
+order = ["crawford_CD4_arm",
+         "crawford_CD8_arm",
+         "crawford_CD4_cl13",
+         "crawford_CD8_cl13",
+         "powrie_innate_colitis",
+         "proserpio_Th2_parasite",
+         "peine_Th0_invitro",
+         "peine_Th1_invitro",
+         "peine_Th2_invitro",
+         "peine_ThMix_invitro",
+         "nir_Th0_invitro",
+         "nir_Th17_invitro"
+         ]
+
+fig, ax = plt.subplots(figsize = (12,12))
+sns.countplot(data = df_fits, y = "study", hue = "f-test", ax = ax, order = order)
+plt.show()
+
+fig.savefig("../../figures/fit_summary_datasets.pdf")
+
+df_fits.to_csv(readdir + "fit_summary_all.csv")
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"JavaScriptSettings\">\n    <option name=\"languageLevel\" value=\"ES6\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (ode_models)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 1eb14882d787358503bdfe4db8ca2b2184fe9d76)
+++ .idea/misc.xml	(date 1611667811107)
@@ -3,5 +3,5 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (ode_models)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (gamma_fits)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/gene_kinetics.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (ode_models)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n    <option name=\"renderExternalDocumentation\" value=\"true\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gene_kinetics.iml	(revision 1eb14882d787358503bdfe4db8ca2b2184fe9d76)
+++ .idea/gene_kinetics.iml	(date 1611667811048)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8 (ode_models)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (gamma_fits)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: code/gamma_fits/fit_pathways.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code/gamma_fits/fit_pathways.py	(date 1611675985728)
+++ code/gamma_fits/fit_pathways.py	(date 1611675985728)
@@ -0,0 +1,53 @@
+import numpy as np
+import pandas as pd
+import seaborn as sns
+import matplotlib.pyplot as plt
+sns.set(context = "poster", style = "ticks")
+
+dir_pw = "../../gene_sets/references/stubbington_"
+tfs = pd.read_csv(dir_pw + "tfs.csv")
+cyto = pd.read_csv(dir_pw + "cytokines.csv")
+cytoR = pd.read_csv(dir_pw + "receptors.csv")
+
+dir_fit = "../../output/gamma_fits/jan2021/fit_summary_all.csv"
+df = pd.read_csv(dir_fit)
+
+df["pathway"] = "other"
+
+idx_tf = df.gene.isin(tfs.gene_name)
+idx_cyto = df.gene.isin(cyto.gene_name)
+idx_cytoR = df.gene.isin(cytoR.gene_name)
+
+df.loc[idx_tf, ["pathway"]] = "TF"
+df.loc[idx_cyto, ["pathway"]] = "Cyto"
+df.loc[idx_cytoR, ["pathway"]] = "CytoR"
+
+df_red = df[df.pathway != "other"]
+g = sns.catplot(data = df_red, x = "pathway", hue = "f-test", col = "study",
+                col_wrap= 3, kind = "count", hue_order= ["ns", "sig"])
+g.set_titles("{col_name}")
+plt.show()
+
+g.savefig("../../figures/barplots_pathways.pdf")
+
+df_sum = df.groupby(["study", "pathway", "f-test"])["gene"].count()
+df_sum2 = df.groupby(["study", "f-test"])["gene"].count()
+
+df_sum = df_sum.to_frame()
+df_sum = df_sum.reset_index()
+
+df_sum2 = df_sum2.to_frame()
+df_sum2 = df_sum2.reset_index()
+
+df_merge = pd.merge(df_sum, df_sum2, on = ["study", "f-test"])
+df_merge["h_pathway"] = df_merge["gene_x"] / df_merge["gene_y"]
+
+
+df_merge_red = df_merge[df_merge.pathway != "other"]
+g = sns.catplot(data = df_merge_red, x = "pathway", y = "h_pathway",
+                hue = "f-test", col = "study", col_wrap= 3, kind = "bar",
+                hue_order= ["ns", "sig"], facet_kws= {"sharey" : False})
+g.set_titles("{col_name}")
+plt.show()
+
+g.savefig("../../figures/barplots_rel_freq_pathways.pdf")
\ No newline at end of file
